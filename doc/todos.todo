TODO    Travailler le filtre géographique avec le système de localities | Opened : 22/01/2020 19:00 | Started 23/01/2020 19:00
        Tâches: - Réfléchir au système de pondération et à son implémentation.
                - Isoler les comportements à tester
                X Générer un jeu de test => py manage.py loaddata location.json
                X Changer l'acquisition de paramètre via deux valeurs
                - Documenter get_near_localities()
                - Tester l'efficacité de la solution "bruteforce"


        Composition du jeu de test :    - 470 lieux partout en France
        Comportements à tester :
                                        - Tester location.utils.get_near_localities() impérativement !
                                        - Tester impérativement le filtre de la requête sous tout les angles !
        Système de pondération :
                - Déterminer la localité parfaite qui vaut 100 : "Un endroit dans ma plus petite localité (ardt/vill) ouvert en ce moment"
                        |_ Same street : 50 + Open : 50 = 100
                - Pertinence du modèle LocalityType ?

        Système de filtrage :
                X locality_match = Initialiser les localités recherchées
                X Récuperer toutes les lieux ainsi que leurs localités
                X Ne garder que ceux dont au moins 1 localité est en commun avec les fonctions de queryset

                *Pondération*
                pour chaque lieu dans la liste:
                        comparer les localités avec celles locality_match


        - Tester les distances entre les points filtrés en derniere étape

        Calcul des distances entre deux points:
                >>> from geopy.distance import geodesic
                >>> paris = (48.850779, 2.350415)
                >>> morvan = (47.316739, 4.113053)
                >>> print(geodesic(paris, morvan).km)
                >>> 215.25703010543708

TODO while searchbar    Implémenter un système pour filtrer les requêtes reçues via la searchbar
        Tâches :        - Déterminer les différents critères de filtres :       Critères    ~   - Critères géographiques (Adresse, géolocalisation)
                                                                                                - Nom du lieux
                                                                                                - Statut (Ouvert/fermé/bientôt)

                        - Se documenter sur les filtres standard de DRF =>  https://www.django-rest-framework.org/api-guide/filtering/
                        - Se documenter sur les managers django => https://docs.djangoproject.com/fr/2.2/topics/db/managers/

                                                ####################################################################
                                                                                Minido
                                                ####################################################################
                                                X Appeler Barnabé pour le voir fin février
                                                x Trouver comment changer le schéma de docstrings dans pycharm





                                                ####################################################################
                                                                                V DONE V
                                                ####################################################################

DONE   Résoudre le problème du rapport à la géographie | Opened : 22/01/2020 19:00 | Expected duration : 1 day | Expected Cost : 500€ | Closed : 23/01/2019 12:30 | Final Cost : 500€
        Tâches :        X Proposer plusieurs solutions au problème
                        X Prendre une décision au sujet du problème ci-dessous
                        X Faire un essai GeoPy + API de geocoding => Pas de Boungind Box
                        X Eventuellement trouver une alternative élégante (DEADLINE : 23.01 12:00)
                        X Comparer les Geocoding API : And the winner is API GOUVERNEMENTALE    * OpenCage      Volumétrie gratuite : 2500/d 1req/s
                                                                                                * Here  Volumétrie gratuite : 8000/d
                                                                                                * Api Gouvernementale   Volumétrie gratuite : INFINIE ??!!

                        X Faire des essais avec l'API
                        X Création du modèle pour les Localités :       Champs ~ * Dénomination de la localité
                                                                                 * Code juridique
                                                                                 * Type
                                                                                 * Type de localité

                        X Création du modèle pour les types de localités et leur pondération
                        X Créer le serializer pour les localités
                        X Premiers éléments de l'algo de filtrage => Première itération sans pondération

        Bloc-Note :
        Problème : Trouver les lieux dans une certaine range autour d'une personne géolocalisée et proposer 6 lieux les plus pertinents pour la personne

        Solution choisie : Récupérer via reverse.geocoding les informations de localité afin de proposer un filtrage selon la localité
                Temps estimé :   10h                    Coût : 500€
                                * 2h (maitrise API)
                                * Création d'un modèle pour stocker les informations provinciales relié au modèle "Location" (3h)
                                * Création d'un manager pour Location qui pourra initialiser  de nouveaux objets provinciaux s'ils n'existent pas encore (5h)
                PRO:    - Facilité d'utilisation et bon mix entre les deux solutions initiales
                        - Un zoom pertinent et plus simple à déterminer. Focus suggéré : Entre 10 or "Fitbound" (lol)
                        - Résout le problème de la pertinence des 6 lieux sélectionnés si jamais les lieux sont enregistrés avec différentes informations provinciales en db

                CONS:   - Attention au volume de donnée requise à l'API. (Irrelevant grâce à l'état français <3)

        Ressources :
                        * Api Gouvernementale : https://geo.api.gouv.fr/adresse
                        * Doc GeoPy : https://geopy.readthedocs.io/en/stable/#banfrance

        Modèle LocalityType :
                Table fixe comprenant les types de localités supportées ainsi que leur valeur de tri :  * Street = 50
                                                                                                        * Locality = 45
                                                                                                        * if(District) = 45
                                                                                                        * city = 40
                                                                                                        * Municipality = 30
                                                                                                        * Context.departement = 20
                                                                                                        * Context.Region = 15
                                                                                                        * Housenumber = 0

        Détail du temps : Total = 10:00
                - 22/01/2020 19:00 -> 23/01/2020 01:00 = 06:00  | Reflexion à la solution
                - 23/01/2010 08:00 -> 10:00 = 02:00     | Mise en place des deux modèles et d'un manager pour Location
                - 23/01/2010 10:30 ->  12:30 = 02:00    | Création des serializers + Premier filtre mis en place


        Solutions non choisis au problème :

                - Solution géométrique : Précision en rond autour de la personne dans un rayon donné (Bounding Box)
                Temps estimé : 1 journée                Coût : 500€
                PRO :   - Elegant
                        - Toujours fonctionnel
                        - Toutes les solutions n'ont pas encore été exploitées (geoPy + here https://geopy.readthedocs.io/en/stable/#here)

                CONS :  - Détermination de la bounding box compliquée (Technologie pointue, peu portable de GeoDjango)
                        - Dernière solution à explorer est payante au dela de 250k utilisation/ mois  (8000/jours) donc peu durable et autonome
                        - Déterminer un diamère pertinent autour de l'usager afin qu'il ait des propositions en nombre suffisant.
                        - Here (en omettant son coût, déjà présent dans la liste)
                                                ET
                - Solution culturelle : Précision au département / Canton / Ville avec un zoom adéquat de la map ?
                Temps estimé : 1/2 journée
                PRO:    - Page d'accueil forcément plus (+) peuplé au début
                        - Plus facile à mettre en place à priori

                CONS:   - Peu générer des désagrément d'utilisation (exemple : Le Morvan qui est sur 3 départements)
                        - Difficile de determiner un petit nombre pertinent pour la page d'accueil lors de l'essor de l'application
